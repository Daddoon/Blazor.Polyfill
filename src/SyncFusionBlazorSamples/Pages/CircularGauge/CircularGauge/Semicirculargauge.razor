@page "/circular-gauge/semi-circular-gauge"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample demonstrates how to render the circular gauge with different start and end angles to create semi-circular or quarter-circular gauges.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, the circular gauge is rendered with different start and end angles to create semi and quarter circular gauges. The radius, start angle, end angle, and center position of the circular gauge can all be customized using the options in the properties panel.</p>
    <p>More information on the semi and quarter circular gauge can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/circular-gauge/appearance#radius-calculation-based-on-angles'>documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge CenterX="@GaugeCenterX" CenterY="@GaugeCenterY" MoveToCenter="@GaugeMoveToCenter" Theme="@Theme">
        <CircularGaugeAxes>
            <CircularGaugeAxis HideIntersectingLabel="@HideLabelCheck" StartAngle="@GaugeStartAngle" EndAngle="@GaugeEndAngle" Minimum="0" Maximum="100" Radius="@GaugeRadius">
                <CircularGaugeAxisLineStyle Width="0.01" Color="#0450C2" />
                <CircularGaugeAxisLabelStyle Position="Syncfusion.Blazor.CircularGauge.Position.Outside" AutoAngle=true>
                    <CircularGaugeAxisLabelFont FontWeight="Normal" FontFamily="Segoe UI" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Position="Syncfusion.Blazor.CircularGauge.Position.Inside" Width="2" Height="12" Interval="4" />
                <CircularGaugeAxisMinorTicks Position="Syncfusion.Blazor.CircularGauge.Position.Inside" Height="5" Width="1" Interval="2" />
                <CircularGaugePointers>
                    <CircularGaugePointer Value="30" Radius="75%" Color="#FF9200" PointerWidth="7">
                        <CircularGaugePointerAnimation Enable=false />
                        <CircularGaugeCap Radius="8" Color="#565656">
                            <CircularGaugeCapBorder Width="0" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="13%" Color="#FF9200" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table title="Properties" style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 15%;">
                </colgroup>
                <tr>
                    <td>
                        <div>Start Angle</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@GaugeStartAngle" min="0" max="360" @onchange="StartSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@GaugeStartAngle°</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>End Angle</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@GaugeEndAngle" min="0" max="360" @onchange="EndSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@GaugeEndAngle°</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Radius</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@SliderRadius" min="30" max="100" @onchange="RadiusSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@SliderRadius%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="property-text" style="width:95%">Radius based on angle</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="@RadiusAngleCheckbox" Checked="@GaugeMoveToCenter" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Center X</div>
                    </td>
                    <td>
                        <div>
                            <input disabled="@CenterSliderEnable" type="range" value="@CenterxSlider" min="0" max="100" @onchange="CenterxSliderChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@CenterxSlider%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Center Y</div>
                    </td>
                    <td>
                        <div>
                            <input disabled="@CenterSliderEnable" type="range" value="@CenterySlider" min="0" max="100" @onchange="CenterySliderChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@CenterySlider%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="property-text" style="width:98%">Hide Intersecting Label</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="@LabelCheck" Checked="@IntersectLabelChecked" TChecked="bool" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<style>
    tr {
        height: 40px;
    }
</style>
@code{
    public Theme Theme { get; set; }
    private double GaugeStartAngle = 270;
    private double GaugeEndAngle = 90;
    private string GaugeRadius = "100%";
    private double SliderRadius = 100;
    private string GaugeCenterX = "50%";
    private string GaugeCenterY = "50%";
    private double CenterxSlider = 50;
    private double CenterySlider = 50;
    private bool GaugeMoveToCenter = false;
    private bool IntersectLabelChecked = true;
    private bool HideLabelCheck = true;
    private bool CenterSliderEnable = false;
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    private void RadiusAngleCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        GaugeMoveToCenter = args.Checked;
        if (GaugeMoveToCenter)
        {
            GaugeCenterX = GaugeCenterY = null;
        }
        else
        {
            GaugeCenterX = CenterxSlider.ToString() + "%";
            GaugeCenterY = CenterySlider.ToString() + "%";
        }
        CenterSliderEnable = GaugeMoveToCenter;
    }
    private void LabelCheck(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IntersectLabelChecked = args.Checked;
        HideLabelCheck = IntersectLabelChecked;
    }
    private void StartSlider(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        GaugeStartAngle = Convert.ToDouble(args.Value);
    }
    private void EndSlider(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        GaugeEndAngle = Convert.ToDouble(args.Value);
    }
    private void RadiusSlider(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        GaugeRadius = (args.Value.ToString() + "%");
        SliderRadius = Convert.ToDouble(args.Value);
    }
    private void CenterxSliderChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        GaugeCenterX = (args.Value.ToString() + "%");
        CenterxSlider = Convert.ToDouble(args.Value);
    }
    private void CenterySliderChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        GaugeCenterY = (args.Value.ToString() + "%");
        CenterySlider = Convert.ToDouble(args.Value);
    }
}

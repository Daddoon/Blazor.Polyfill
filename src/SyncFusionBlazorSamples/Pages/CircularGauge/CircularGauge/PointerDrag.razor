@page "/circular-gauge/pointer-drag"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample illustrates dragging a pointer and a range in a circular gauge. End user can drag the pointer and the range by enabling the pointer drag and range drag options.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to use drag and drop to move the pointer and range in the circular gauge. The <code><a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_EnablePointerDrag'>EnablePointerDrag</a></code> property can be used to enable or disable the pointer drag functionality. Similarly, the <code><a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_EnableRangeDrag'>EnableRangeDrag</a></code> property can be used to enable or disable the range drag functionality.</p>
    <p>More information on the pointer drag can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/circular-gauge/pointers#dragging-pointer'>documentation section</a> as well as the range drag can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/circular-gauge/ranges#dragging-ranges'>documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge EnablePointerDrag="@PointerDrags" EnableRangeDrag="RangeDrag" Theme="@Theme">
        <CircularGaugeEvents OnDragEnd="OnDragEnd" />
        <CircularGaugeAxes>
            <CircularGaugeAxis EndAngle="140" StartAngle="220" Radius="80%" Minimum="0" Maximum="120">
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="45%">
                        <ContentTemplate>
                            <div class="templateAlign"><span>@TemplateValue MPH</span></div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
                <CircularGaugeAxisLineStyle Width="0.01" Color="#9E9E9E" />
                <CircularGaugeAxisMajorTicks UseRangeColor="true" />
                <CircularGaugeAxisMinorTicks UseRangeColor="true" />
                <CircularGaugeAxisLabelStyle UseRangeColor="true">
                    <CircularGaugeAxisLabelFont FontFamily="Segoe UI" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="@FirstRangeStart" End="@FirstRangeEnd" StartWidth="8" EndWidth="8" Radius="108%" Color="@FirstRangeColor" />
                    <CircularGaugeRange Start="@SecondRangeStart" End="@SecondRangeEnd" StartWidth="8" EndWidth="8" Radius="108%" Color="@SecondRangeColor" />
                    <CircularGaugeRange Start="@ThirdRangeStart" End="@ThirdRangeEnd" StartWidth="8" EndWidth="8" Radius="108%" Color="@ThirdRangeColor" />
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="@PointerValue" Radius="60%" Color="@PointerColor" MarkerWidth="5">
                        <CircularGaugeCap Radius="10">
                            <CircularGaugeCapBorder Width="5" Color="@PointerColor" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="0.01%" Color="@PointerColor" />
                    </CircularGaugePointer>
                    <CircularGaugePointer Value="@PointerValue" Radius="110%" Color="@PointerColor" MarkerWidth="20" MarkerHeight="20" Type="PointerType.Marker" MarkerShape="GaugeShape.InvertedTriangle" />
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 10%;">
                </colgroup>
                <tr>
                    <td>
                        <div>Pointer Value</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@PointerValue" min="0" max="120" @onchange="PointerDragChange" />
                        </div>
                    </td>
                    <td style="text-align:center;padding-left:10px">
                        <span>@SliderValueText</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top:4px; width:99%">Allow Pointer Drag</div>
                    </td>
                    <td>
                        <div style="padding-top:4px">
                            <SfCheckBox ValueChange="@EnableDragCheckbox" Checked="@EnableDragChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top:7px">Allow Ranges Drag</div>
                    </td>
                    <td>
                        <div style="padding-top:7px">
                            <SfCheckBox ValueChange="@EnableRangeChange" Checked="@EnableRangeChanges" TChecked="bool" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<style>
    .templateAlign{
        font-weight: lighter;
        font-style: oblique;
        margin-left:-20px;
        font-size: 14px;
        color:@TemplateColor;
    }
    tr {
        height: 40px;
    }
    td{
        width:50%;
    }
</style>
@code{
    public Theme Theme { get; set; }
    private bool PointerDrags = true;
    private bool RangeDrag = false;
    private string FirstRangeColor = "#30B32D";
    private string SecondRangeColor = "#E5C31C";
    private string ThirdRangeColor = "#F03E3E";
    private string PointerColor = "#E5C31C";
    private string TemplateValue = "70";
    private string TemplateColor = "#E5C31C";
    private bool EnableDragChange = true;
    private bool EnableRangeChanges = false;
    private double PointerSliderValue = 70;
    private double PointerValue = 70;
    private double SliderValueText = 70;
    private double FirstRangeStart = 0;
    private double FirstRangeEnd = 40;
    private double SecondRangeStart = 40;
    private double SecondRangeEnd = 100;
    private double ThirdRangeStart = 100;
    private double ThirdRangeEnd = 120;
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    public void EnableDragCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        EnableDragChange = args.Checked;
        PointerDrags = args.Checked;
    }
    public void EnableRangeChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        EnableRangeChanges = args.Checked;
        RangeDrag = args.Checked;
    }
    private void PointerDragChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        PointerSliderValue = Convert.ToDouble(args.Value);
        SetPointer(PointerSliderValue);
    }
    public void OnDragEnd(Syncfusion.Blazor.CircularGauge.PointerDragEventArgs args)
    {
        if (args.Type == "pointerEnd")
            SetPointer(args.CurrentValue);
    }
    private void SetPointer(double currentPointerValue)
    {
        PointerColor = TemplateColor = ((currentPointerValue <= FirstRangeEnd && currentPointerValue >= FirstRangeStart) ? FirstRangeColor :
            ((currentPointerValue > SecondRangeStart && currentPointerValue <= SecondRangeEnd) ? SecondRangeColor :
            ((currentPointerValue > ThirdRangeStart && currentPointerValue <= ThirdRangeEnd) ? ThirdRangeColor : null)));
        PointerValue = currentPointerValue;
        TemplateValue = (Math.Ceiling(currentPointerValue)).ToString();
        SliderValueText = Math.Ceiling(currentPointerValue);
    }
}

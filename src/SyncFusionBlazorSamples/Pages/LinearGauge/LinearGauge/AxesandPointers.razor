@page "/linear-gauge/axes-and-pointers"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.LinearGauge
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample demonstrates the linear gauge's axes and pointers features, as well as the customization options available in these features.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to change the minimum and maximum value of an axis, invert an axis, and render an axis in the opposite direction. Additionally, the label format and visibility of an axis's last label can be customized. In the pointer, you can change the type and placement of the marker.
    </p>
    <p>More information about axes can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/linear-gauge/axis'>documentation section</a>, as well as information about pointers in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/linear-gauge/pointers'>documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfLinearGauge Orientation="Orientation.Horizontal" @ref="@Linear" Theme="@Theme">
        <LinearGaugeAxes>
            <LinearGaugeAxis ShowLastLabel="@GaugeLastLabel" Minimum="@GaugeMinimumValue" Maximum="@GaugeMaximumValue" IsInversed="@GaugeInversed" OpposedPosition="@GaugeOpposed">
                <LinearGaugeAxisLabelStyle Offset="@GaugeLabelOffset" Format="@GaugeLabelFormat">
                    <LinearGaugeAxisLabelFont FontFamily="Segoe UI"></LinearGaugeAxisLabelFont>
                </LinearGaugeAxisLabelStyle>
                <LinearGaugeMajorTicks Color="#9E9E9E" Interval="20" Height="20" />
                <LinearGaugeMinorTicks Color="#9E9E9E" Interval="2" Height="10" />
                <LinearGaugeAnnotations>
                    <LinearGaugeAnnotation AxisIndex="0" AxisValue="@AnnotationAxisvalue" X="10" Y="@AnnotationY" ZIndex="1">
                        <ContentTemplate>
                            <div style='width:70px'><h1 style='font-size:14px;margin-left:-30px;'>@AnnotationText</h1></div>
                        </ContentTemplate>
                    </LinearGaugeAnnotation>
                </LinearGaugeAnnotations>
                <LinearGaugePointers>
                    <LinearGaugePointer PointerValue="@AnnotationAxisvalue" Height="15" Width="15" Placement="@GaugePointerPlacement" Offset="@GaugePointerOffset" MarkerType="@GaugeMarkerType" Type="@GaugePointerType" />
                </LinearGaugePointers>
            </LinearGaugeAxis>
        </LinearGaugeAxes>
    </SfLinearGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%;margin-left: -10px;">
                <tr>
                    <td>
                        <div class="textPosition">
                            Axis Minimum                            
                        </div>
                    </td>
                    <td>
                        <input type="range" value="@MinimumValue" min="0" max="100" @onchange="MinimumChange" style="width:90%"/>
                    </td>
                    <td>
                        <span>@MinimumValueText</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">
                            Axis Maximum                            
                        </div>
                    </td>
                    <td>
                         <input type="range" value="@MaximumValue" min="0" max="100" @onchange="MaximumChange" style="width:90%"/>
                    </td>
                    <td>
                        <span>@MaximumValueText</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Axis Inversed</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox Checked="@InveredChecked" ValueChange="@InversedChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Axis Opposed</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox Checked="@OpposedChecked" ValueChange="@OpposedChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Show Last Label</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox Checked="@LastLabelChecked" ValueChange="@LastLabelChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Label Format</div>
                    </td>
                    <td>
                        <div style="width: 117%;">
                            <SfTextBox Value="@LabelFormatValue" ValueChange="@LabelFormatChange" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Pointer Type</div>
                    </td>
                    <td>
                        <div class="propertyValue">
                            <SfDropDownList DataSource="@PointerTypeList" @bind-Value="@PointerTypeValue" Placeholder="Select Range Bar Color">
                                <DropDownListEvents TItem="DropDownData" ValueChange="PointerTypeChange" TValue="string" />
                                <DropDownListFieldSettings text="Name" value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="textPosition">Marker Placement</div>
                    </td>
                    <td>
                        <div class="propertyValue">
                            <SfDropDownList Enabled="@PlacementListEnable" DataSource="@PointerPlacementList" Value="@PlacementValue">
                                <DropDownListEvents TItem="DropDownData" ValueChange="PlacementTypeChange" TValue="string" />
                                <DropDownListFieldSettings text="Name" value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<style>
    .value {
        margin-left: 15px;
    }

    tr {
        height: 48px;
    }

    td {
        width: 50%;
        margin-left: 10px;
    }

    .textPosition {
        padding-left: 4%;
        padding-top: 4%;
    }
    .propertyValue {
        padding-top: 4%;
        width:117%;
    }
</style>
@code {
    public Theme Theme { get; set; }
    private string GaugePointerOffset = "30";
    private double GaugeLabelOffset = 48;
    private double GaugeMaximumValue = 115;
    private double GaugeMinimumValue = 0;
    private bool GaugeInversed = false;
    private bool GaugeLastLabel = false;
    private bool GaugeOpposed = false;
    private string GaugeLabelFormat = "{value}";
    private MarkerType GaugeMarkerType = MarkerType.InvertedTriangle;
    private Syncfusion.Blazor.LinearGauge.Placement GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far;
    private Point GaugePointerType = Point.Marker;
    public string AnnotationText = "20 MPH";
    private double AnnotationAxisvalue = 20;
    private double MinimumValue = 0;
    private double MaximumValue = 115;
    private double MinimumValueText = 0;
    private double MaximumValueText = 115;
    private bool InveredChecked = false;
    private bool LastLabelChecked = false;
    private bool OpposedChecked = false;
    private string LabelFormatValue = "{value}";
    private string PointerTypeValue = "Marker";
    private string PlacementValue = "Far";
    private bool PlacementListEnable = true;
    private double AnnotationY = 35;
    SfLinearGauge Linear;
    public class DropDownData
    {
        public string Name { get; set; }
    }
    private List<DropDownData> PointerTypeList = new List<DropDownData> {
        new DropDownData{ Name = "Marker"},
        new DropDownData{ Name = "Bar"},
    };
    private List<DropDownData> PointerPlacementList = new List<DropDownData> {
        new DropDownData{ Name = "Far"},
        new DropDownData{ Name = "Near"},
        new DropDownData{ Name = "Center"},
    };
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    private void MinimumChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        MinimumValue = Convert.ToDouble(args.Value);
        GaugeMinimumValue = MinimumValueText = MinimumValue;
        AnnotationAxisvalue = (Math.Min(MinimumValue, MaximumValue)) > 20 ? Math.Min(MinimumValue, MaximumValue) : 20;
        AnnotationText = (AnnotationAxisvalue + " MPH").ToString();
        GaugeMaximumValue = MaximumValue;
    }
    private void MaximumChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        MaximumValue = Convert.ToDouble(args.Value);
        GaugeMinimumValue = MinimumValue;
        AnnotationAxisvalue = (Math.Min(MinimumValue, MaximumValue)) > 20 ? Math.Min(MinimumValue, MaximumValue) : 20;
        AnnotationText = (AnnotationAxisvalue + " MPH").ToString();
        GaugeMaximumValue = MaximumValueText = MaximumValue;
    }
    private void InversedChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        InveredChecked = GaugeInversed = args.Checked;
    }
    private void LastLabelChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        LastLabelChecked = GaugeLastLabel = args.Checked;
    }
    private void OpposedChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OpposedChecked = GaugeOpposed = args.Checked;
        if (OpposedChecked)
        {
            GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Near;
            GaugeMarkerType = MarkerType.Triangle;
            GaugePointerOffset = "-15";
            GaugeLabelOffset = 0;
            AnnotationY = -75;
        }
        else
        {
            GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far;
            GaugeMarkerType = MarkerType.InvertedTriangle;
            GaugePointerOffset = "30";
            GaugeLabelOffset = 50;
            AnnotationY = 35;
        }
    }
    private void LabelFormatChange(ChangedEventArgs args)
    {
        LabelFormatValue = (args.Value).ToString();
        GaugeLabelFormat = LabelFormatValue;
    }
    private void PointerTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        PointerTypeValue = (args.Value).ToString();
        if (PointerTypeValue == "Marker") { GaugePointerType = Point.Marker; PlacementListEnable = true; }
        else { GaugePointerType = Point.Bar; PlacementListEnable = false; }
    }
    private void PlacementTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        PlacementValue = (args.Value).ToString();
        if (PlacementValue == "Far") { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far; }
        else if (PlacementValue == "Near") { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Near; }
        else { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Center; }
    }
}

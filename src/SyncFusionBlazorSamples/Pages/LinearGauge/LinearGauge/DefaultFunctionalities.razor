@page "/linear-gauge/default-functionalities"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.LinearGauge
@using Newtonsoft.Json;
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample shows the linear gauge's basic rendering, which includes an axis, a pointer, ticks, and annotation.</p>
</SampleDescription>
<ActionDescription>
    <p>The linear gauge control displays the values of scales in either horizontal or vertical orientation. To customize the basic appearance of the linear gauge, you can use axes, ranges, ticks, pointer, and container properties.</p>
    <p>More information about the linear gauge can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/linear-gauge/getting-started'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfLinearGauge Orientation="Orientation.Horizontal" Theme="@Theme">
        <LinearGaugeAxes>
            <LinearGaugeAxis>
                <LinearGaugeAxisLabelStyle Offset="48">
                    <LinearGaugeAxisLabelFont FontFamily="Segoe UI"></LinearGaugeAxisLabelFont>
                </LinearGaugeAxisLabelStyle>
                <LinearGaugeMajorTicks Color="#9E9E9E" Interval="10" Height="20" />
                <LinearGaugeMinorTicks Color="#9E9E9E" Interval="2" Height="10" />
                <LinearGaugeAnnotations>
                    <LinearGaugeAnnotation AxisIndex="0" AxisValue="10" X="10" Y="-70" ZIndex="1">
                        <ContentTemplate>
                            <div style="width: 70px;margin-left: -53%;margin-top: 5%;font-size: 16px;">10 MPH</div>
                        </ContentTemplate>
                    </LinearGaugeAnnotation>
                </LinearGaugeAnnotations>
                <LinearGaugePointers>
                    <LinearGaugePointer PointerValue="10" Height="15" Width="15" Placement="Placement.Near" Offset="-40" MarkerType="MarkerType.Triangle" />
                </LinearGaugePointers>
            </LinearGaugeAxis>
        </LinearGaugeAxes>
    </SfLinearGauge>
</div>
@code {
    public Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}

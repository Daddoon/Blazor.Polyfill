@page "/linear-gauge/container"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.LinearGauge
@using Syncfusion.Blazor.DropDowns
@using Newtonsoft.Json;
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample shows the different types of containers, such as normal, thermometer, and rounded rectangle. The linear gauge's orientation can also be changed from vertical to horizontal.</p>
</SampleDescription>
<ActionDescription>
    <p>The linear gauge can be rendered vertically or horizontally depending on the option selected in the <b>Orientation</b> drop-down list. You can also select the container type from the <b>Container Type</b> drop-down list.</p>
    <p>More information about containers can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/linear-gauge/linear-gauge-appearance#customizing-the-linear-gauge-container'>documentation section</a>, as well as information about orientation in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/linear-gauge/axis#orientation'>documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfLinearGauge Title="Temparature Measure" Orientation="@GaugeOrientation" Theme="@Theme">
        <LinearGaugeTitleStyle FontFamily="Segoe UI"></LinearGaugeTitleStyle>
        <LinearGaugeContainer Width="13" RoundedCornerRadius="5" Type="@GaugeContainerType">
            <LinearGaugeContainerBorder Width="1"></LinearGaugeContainerBorder>
            <LinearGaugeAxes>
                <LinearGaugeAxis Minimum="0" Maximum="180">
                    <LinearGaugeLine Width="0" />
                    <LinearGaugeMajorTicks Color="#9e9e9e" Interval="20" Height="20" />
                    <LinearGaugeMinorTicks Color="#9e9e9e" Interval="10" Height="10" />
                    <LinearGaugeAxisLabelStyle>
                        <LinearGaugeAxisLabelFont FontFamily="Segoe UI"></LinearGaugeAxisLabelFont>
                    </LinearGaugeAxisLabelStyle>
                    <LinearGaugePointers>
                        <LinearGaugePointer PointerValue="90" Height="13" Width="13" Type="Point.Bar" Color="#f02828" />
                    </LinearGaugePointers>
                </LinearGaugeAxis>
                <LinearGaugeAxis Minimum="0" Maximum="180" OpposedPosition="true">
                    <LinearGaugeLine Width="0" />
                    <LinearGaugeMajorTicks Interval="20" Height="20" />
                    <LinearGaugeMinorTicks Color="#9e9e9e" Interval="10" Height="10" />
                    <LinearGaugeAxisLabelStyle>
                        <LinearGaugeAxisLabelFont FontFamily="Segoe UI"></LinearGaugeAxisLabelFont>
                    </LinearGaugeAxisLabelStyle>
                    <LinearGaugePointers>
                        <LinearGaugePointer Width="0" />
                    </LinearGaugePointers>
                </LinearGaugeAxis>
            </LinearGaugeAxes>
        </LinearGaugeContainer>
    </SfLinearGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tbody>
                    <tr>
                        <td>
                            <div>Orientation</div>
                        </td>
                        <td>
                            <div style="width:100%">
                                <SfDropDownList TValue="string" TItem="OrientationData" DataSource="@GaugeOrientData" @bind-Value="@OrientationValue">
                                    <DropDownListEvents TValue="string" TItem="OrientationData" ValueChange="OrintationChange" />
                                    <DropDownListFieldSettings text="Name" value="Name" />
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <br/>
                    <tr>
                        <td>
                            <div>Container Type</div>
                        </td>
                        <td>
                            <div style="width:100%">
                                <SfDropDownList TValue="string" TItem="ContainerTypeData" DataSource="@ContainerTypeDatas" @bind-Value="@ContainerTypeValue">
                                    <DropDownListEvents TValue="string" TItem="ContainerTypeData" ValueChange="ContainerTypeChange" />
                                    <DropDownListFieldSettings text="Name" value="Name" />
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    tr {
        height: 40px;
    }

    td {
        width: 50%
    }
</style>
@code {
    public Theme Theme { get; set; }
    private Orientation GaugeOrientation = Orientation.Vertical;
    private ContainerType GaugeContainerType = ContainerType.Thermometer;
    private string OrientationValue = "Vertical";
    private string ContainerTypeValue = "Thermometer";
    public class OrientationData
    {
        public string Name { get; set; }
    }
    private List<OrientationData> GaugeOrientData = new List<OrientationData> {
        new OrientationData{ Name = "Vertical"},
        new OrientationData{ Name = "Horizontal"},
    };
    public class ContainerTypeData
    {
        public string Name { get; set; }
    }
    private List<ContainerTypeData> ContainerTypeDatas = new List<ContainerTypeData> {
        new ContainerTypeData{ Name = "Thermometer"},
        new ContainerTypeData{ Name = "Normal"},
        new ContainerTypeData{ Name = "RoundedRectangle"},
    };
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    private void OrintationChange(ChangeEventArgs<string, OrientationData> args)
    {
        this.OrientationValue = (args.Value).ToString();
        this.GaugeOrientation = this.OrientationValue == "Vertical" ? Orientation.Vertical : Orientation.Horizontal;
    }
    private void ContainerTypeChange(ChangeEventArgs<string, ContainerTypeData> args)
    {
        this.ContainerTypeValue = (args.Value).ToString();
        if (this.ContainerTypeValue == "Thermometer")
        {
            this.GaugeContainerType = ContainerType.Thermometer;
        }
        else if (this.ContainerTypeValue == "Normal")
        {
            this.GaugeContainerType = ContainerType.Normal;
        }
        else
        {
            this.GaugeContainerType = ContainerType.RoundedRectangle;
        }
    }
}

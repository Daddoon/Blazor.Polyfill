@page "/stock-chart/stock-chart-spline-area"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@using ThemeHelper
@using System.IO
@using System.Net.Http.Json
@inject HttpClient Http

<SampleDescription>
    <p>This sample visualizes stock data with spline area. Period and range selector help us to navigate to the different data.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the Stock chart. <code>SplineAreaSeries</code> is used to represent selected data value.</p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div> }
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="Google Stock Price" IndicatorType="@Indicators" Theme="@theme" TrendlineType="@TrendLines">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" XName="x" YName="high" Type="ChartSeriesType.Area" Fill="@FillColor" Name="google"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }
    </style>
}
@code{ 
    
    List<TechnicalIndicators> Indicators = new List<TechnicalIndicators>() { };
    List<TrendlineTypes> TrendLines = new List<TrendlineTypes>() { };

    private ChartData[] DataSource;
    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        if(File.Exists("./wwwroot/data/stock-chart/googl.json"))
        {
            DataSource = JsonConvert.DeserializeObject<ChartData[]>(File.ReadAllText("./wwwroot/data/stock-chart/googl.json"));
        }
        else
        {
            DataSource = await Http.GetFromJsonAsync<ChartData[]>("data/stock-chart/chart-data.json");
        }
    }

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    string FillColor;
    string valueUrl = "url";
    private Theme theme { get; set; }
    string CurrentUri;
    void BeforeRender()
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.MaterialDark;
                FillColor = String.Concat(valueUrl, "(#materialdark-gradient-chart)");
            }
            else
            {
                theme = Theme.Material;
                FillColor = String.Concat(valueUrl, "(#material-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FabricDark;
            }
            else
            {
                theme = Theme.Fabric;
            }
            FillColor = String.Concat(valueUrl, "(#fabric-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Bootstrap5Dark;
                FillColor = String.Concat(valueUrl, "(#bootstrap5dark-gradient-chart)");
            }
            else
            {
                theme = Theme.Bootstrap5;
                FillColor = String.Concat(valueUrl, "(#bootstrap5-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
            FillColor = String.Concat(valueUrl, "(#bootstrap4-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.BootstrapDark;
            }
            else
            {
                theme = Theme.Bootstrap;
            }
            FillColor = String.Concat(valueUrl, "(#bootstrap-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
            FillColor = String.Concat(valueUrl, "(#highcontrast-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("tailwind") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.TailwindDark;
                FillColor = String.Concat(valueUrl, "(#tailwinddark-gradient-chart)");
            }
            else
            {
                theme = Theme.Tailwind;
                FillColor = String.Concat(valueUrl, "(#tailwind-gradient-chart)");
            }
        }
        else
        {
            theme = Theme.Bootstrap4;
            FillColor = String.Concat(valueUrl, "(#bootstrap4-gradient-chart)");
        }
    }
}
<style>
    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }
    
    #materialdark-gradient-chart stop {
        stop-color: #9ECB08;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }
    
    #bootstrap5-gradient-chart stop {
        stop-color: #262E0B;
    }
    #bootstrap5dark-gradient-chart stop {
        stop-color: #5ECB9B;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.9;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }

    #tailwind-gradient-chart stop {
        stop-color: #5A61F6;
    }
    
    #tailwinddark-gradient-chart stop {
        stop-color: #8B5CF6;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="materialdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwinddark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>
@page "/stock-chart/multiple-series"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@using ThemeHelper
@using System.IO
@using System.Net.Http.Json
@inject HttpClient Http

<SampleDescription>
    <p>This sample visualizes stock chart with multiple series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the Stock chart. <code>LineSeries</code> is used to represent selected data value.</p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div> }
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="Multiple Series" IndicatorType="@Indicators" Theme="@theme" TrendlineType="@TrendLines">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis Interval="40">
                <StockChartAxisLineStyle Color="Transparent"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0" Color="Transparent"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Line" XName="x" YName="close" Name="Apple"></StockChartSeries>
                <StockChartSeries DataSource="@DataSource2" Type="ChartSeriesType.Line" XName="x" YName="close" Name="Google"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }
    </style>
}
@code{ 
    
    private ChartData[] DataSource;

    private ChartData[] DataSource2;
    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        if(File.Exists("./wwwroot/data/stock-chart/goog.json"))
        {
            DataSource = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/data/stock-chart/goog.json"));
            DataSource2 = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/data/stock-chart/googl.json"));
        }
        else
        {
            DataSource = await Http.GetFromJsonAsync<ChartData[]>("data/stock-chart/goog.json");
            DataSource2 = await Http.GetFromJsonAsync<ChartData[]>("data/stock-chart/googl.json");
        }
    }

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    List<TechnicalIndicators> Indicators = new List<TechnicalIndicators>() { };
    List<TrendlineTypes> TrendLines = new List<TrendlineTypes>() { };
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    Theme theme = Theme.Bootstrap4;
    void BeforeRender()
    {
        theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    } 
}
@page "/stock-chart/candlestick-volume"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@using ThemeHelper
@using System.IO
@using System.Net.Http.Json
@inject HttpClient Http


<SampleDescription>
    <p>This sample visualizes stock chart with multiple pan.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the Stock chart with volume. <code>CandleSeries</code> is used to represent selected data value and <code>ColumnSeries</code> is used to represent the volume.</p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div> 
}
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="AAPL Historical" Theme="@theme">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis LabelFormat="n0">
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
            </StockChartPrimaryYAxis>
            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartAxes>
                <StockChartAxis RowIndex=1 Name="yAxis1" OpposedPosition="true">
                </StockChartAxis>
            </StockChartAxes>
            <StockChartRows>
                <StockChartRow Height="30%"></StockChartRow>
                <StockChartRow Height="70%"></StockChartRow>
            </StockChartRows>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Candle" XName="date" YName="high" YAxisName="yAxis1" High="high" Low="low"></StockChartSeries>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Column" XName="date" YName="volume" High="high" Low="low" Name="Apple Inc"></StockChartSeries>
            </StockChartSeriesCollection>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }
    </style>
}
@code{ 
    
    private ChartData[] DataSource;
    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        if(File.Exists("./wwwroot/data/stock-chart/chart-data.json"))
        {
            DataSource = JsonConvert.DeserializeObject<ChartData[]>(File.ReadAllText("./wwwroot/data/stock-chart/chart-data.json"));
        }
        else
        {
            DataSource = await Http.GetFromJsonAsync<ChartData[]>("data/stock-chart/chart-data.json");
        }
    }

    public class ChartData
    {
        public DateTime date { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    Theme theme = Theme.Bootstrap4;
    void BeforeRender()
    {
        theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    } 
}
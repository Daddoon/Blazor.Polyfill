@page "/chart/export"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using PointRender

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample demonstrates the export of the chart, allowing you to export it to PDF and image formats such as JPEG, PNG and SVG.</p>
</SampleDescription>
<ActionDescription>
    <p>By clicking on <code>Export</code>, you can export the chart by calling its public method <code>Export()</code>. To be more precise, define parameters such as the export type and the file name while exporting.</p>
    <p>More information about the export can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-print/#export'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section col-lg-9 sb-property-border" align="center">
    <SfChart @ref="@chartInstance" Title="Top 10 Countries Using Solar Power" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis Title="Country" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="0" Maximum="40" Interval="10" Title="Measurements (in Gigawatt)" LabelFormat="{value}GW">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" XName="Country" YName="GigaWatts" Type="ChartSeriesType.Column">
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartEvents OnPointRender="PointRender"></ChartEvents>
    </SfChart>
</div>

<div class="col-lg-3 property-section">
<div class="property-panel-header">Properties</div>
    <table title="Properties" style="width: 100%">
        <tbody>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div style="margin-top:-3%">
                        Export Type
                    </div>
                </td>
                <td style="width: 100%;margin-top:4%;">
                    <div style="width:100%;margin-left:5%">
                        <SfDropDownList TValue="string" TItem="FileFormatType" DataSource="@ExportTypes" @bind-Value="@ChartExportType" Width="95%">
                            <DropDownListEvents TValue="string" TItem="FileFormatType" ValueChange="ChartFileValueChange" />
                            <DropDownListFieldSettings Text="Text" Value="Text" />
                        </SfDropDownList>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>File Name</div>
                </td>
                <td style="width: 40%;">
                    <div class="e-float-input" style='margin-top:5%;width:95%;margin-left:5%'>
                        <SfTextBox Value="@FileName" ValueChange="@NameChange" />
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    <br/>
    <div style="height: 45px; text-transform:none !important;width:100%;margin-left:40%">
         <SfButton @onclick="ExportChart" Content="Export" CssClass="e-info" IsToggle="true" IsPrimary="true"></SfButton>
    </div>
</div>

@code{

    private SfChart chartInstance;
    private Theme Theme { get; set; }
    public string ChartExportType { get; set; } = "JPEG";
    public string FileName { get; set; } = "Charts";
    public List<ExportData> ChartPoints { get; set; } = new List<ExportData>
    {
        new ExportData {Country="DEZ", GigaWatts = 35.5},
        new ExportData {Country="CHN", GigaWatts = 18.3},
        new ExportData {Country="ITA", GigaWatts = 17.6},
        new ExportData {Country="JPN", GigaWatts = 13.6},
        new ExportData {Country="US", GigaWatts = 12},
        new ExportData {Country="ESP", GigaWatts = 5.6},
        new ExportData {Country="FRA", GigaWatts = 4.6},
        new ExportData {Country="AUS", GigaWatts = 3.3},
        new ExportData {Country="BEL", GigaWatts = 3},
        new ExportData {Country="UK", GigaWatts = 2.9}
    };
    public class FileFormatType
    {
        public string Id { get; set; }
        public string Text { get; set; }
    }
    private List<FileFormatType> ExportTypes = new List<FileFormatType>() {
        new FileFormatType(){ Id= "JPEG", Text= "JPEG" },
        new FileFormatType(){ Id= "PNG", Text= "PNG" },
        new FileFormatType(){ Id= "SVG", Text= "SVG" },
        new FileFormatType(){ Id= "PDF", Text= "PDF" },
    };
    private void NameChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FileName = args.Value;
    }
    private void ChartFileValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FileFormatType> args)
    {
        ChartExportType = args.Value;
    }
    protected override void OnInitialized()
    {
        this.SetTheme(null);
    }

    public void PointRender(PointRenderEventArgs args)
    {
        this.SetTheme(args);
    }

    private void SetTheme(PointRenderEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Bootstrap5Dark;
                else
                    args.Fill = PointColor.Bootstrap5DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap5;
                else
                    args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.TailwindDark;
                else
                    args.Fill = PointColor.TailwindDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind;
                else
                    args.Fill = PointColor.TailwindColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public async Task ExportChart(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        ExportType ExportFileType = ExportType.JPEG;
        switch (ChartExportType) {
            case "JPEG":
                ExportFileType = ExportType.JPEG;
                break;
            case "PNG":
                ExportFileType = ExportType.PNG;
                break;
            case "SVG":
                ExportFileType = ExportType.SVG;
                break;
            case "PDF":
                ExportFileType = ExportType.PDF;
                break;
        }
        await chartInstance.ExportAsync(ExportFileType, FileName);
    }

    public class ExportData
    {
        public string Country { get; set; }
        public double GigaWatts { get; set; }
    }

}


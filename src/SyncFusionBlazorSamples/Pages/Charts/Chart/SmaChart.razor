@page "/chart/simple-moving-average-indicator"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@using System.IO
@using System.Net.Http.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample illustrates a stock chart with candle series and a simple moving average indicator. The trackball shows the information about the stock and signal value of a day.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a simple moving average indicator. The simple moving average indicator is used to define the direction of the trend.</p>
    <p><code>Tooltip</code> is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the simple moving average indicator can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/stock-chart/technical-indicators/#simple-moving-average-sma'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfChart Title="AAPL - 2012-2017" Theme="@Theme">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Months" ZoomFactor="0.2" ZoomPosition="0.6">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Price (in Million)" LabelFormat="${value}M" Minimum="50" Maximum="170" Interval="30">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartZoomSettings EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" XName="Period" Low="Low" High="High" Close="Close" Volume="Volume" Open="Open"
                         Width="2" Name="Apple Inc" Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d">
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartIndicators>
            <ChartIndicator Type="TechnicalIndicators.Sma" Field="FinancialDataFields.Close" XName="x" SeriesName="Apple Inc" Fill="blue" Period="14">
                <ChartIndicatorAnimation Enable="true"></ChartIndicatorAnimation>
            </ChartIndicator>
        </ChartIndicators>
    </SfChart>
</div>

@code{

    private Theme Theme { get; set; }
    public SMAChartData[] ChartPoints { get; set; } = new SMAChartData[] { };

    protected override async Task OnInitializedAsync()
    {
        if(File.Exists("./wwwroot/data/chart/financial-data.json"))
        {
            ChartPoints = JsonConvert.DeserializeObject<SMAChartData[]>(File.ReadAllText("./wwwroot/data/chart/financial-data.json"));
        }
        else
        {
            ChartPoints = await Http.GetFromJsonAsync<SMAChartData[]>("data/chart/financial-data.json");
        }

        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class SMAChartData
    {
        public DateTime Period { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Open { get; set; }
        public double Close { get; set; }
        public double Volume { get; set; }
    }
}

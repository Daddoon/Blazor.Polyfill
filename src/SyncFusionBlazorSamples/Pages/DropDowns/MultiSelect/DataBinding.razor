@page "/MultiSelect-Dropdown/Data-Binding"

@using System.Collections.ObjectModel;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using System.Dynamic

@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample demonstrates the different data binding supports of the MultiSelect. Click the MultiSelect element and choose one or more items from the suggestion list. At the very first time, when clicking on the remote data MultiSelect, the loader icon will be shown until the remote request gets the data from the server and displays it.</p>
</SampleDescription>
<ActionDescription>
   <p>The MultiSelect loads the data either from local data sources or remote data services through the <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.MultiSelectModel-1.html#Syncfusion_Blazor_DropDowns_MultiSelectModel_1_DataSource' target='_blank'> DataSource</a> property. It supports the data type of <code>Array</code>, <code>Observable Collection</code>, <code>ExpandoObject</code>, <code>DynamicObject</code> and <code>DataManager</code>.</p>
   <p>The DataManager, that acts as an interface between the service endpoint and MultiSelect will require the following minimal information to interact with the service endpoint properly.</p>
       <ul>
         <li><a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Url' target='_blank'>DataManager->Url</a> - Defines the service endpoint to fetch data.</li>
         <li><a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Adaptor' target='_blank'>DataManager->Adaptor</a> - Defines the adaptor option. By default,<code>ODataAdaptor</code> is used for remote binding.</li>
      </ul>
    <p>The adaptor is responsible for processing responses and requests from/to the service endpoint. <code>Syncfusion.Blazor.Data</code> package provides some predefined adaptors that are designed to interact with particular service endpoints. They are:</p>
    <ul><li><code>UrlAdaptor</code> - Use this to interact with any remote services.</li>
        <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
        <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
        <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
        <li><code>WebMethodAdaptor</code> - Use this to interact with web methods.</li>
    </ul>
    <p>Different types of data binding are bound in this sample. They are:</p>
    <ul><li>Local data is bound to a collection of sports data.</li>
        <li>Remote data is bound to a collection of customer data as an instance of DataManager.</li>
        <li>Observable data is bound to a collection of colors data.</li>
        <li>ExpandObject is bound to the collection of vehicles data.</li>
        <li>DynamicObject is bound to the collection of customers data.</li>
    </ul>
    <p>More information on the data binding feature configuration can be found in the <a href='https://blazor.syncfusion.com/documentation/multiselect-dropdown/data-binding/' target='_blank'> documentation section</a>.</p>
</ActionDescription>

<div class="control-section col-lg-12">
    <div class="row">
        <div id="local-data" class="col-lg-6">
            <div class="content">
                <h4>Local Data</h4>
                <SfMultiSelect TValue="string[]" TItem="Countries" Placeholder="Select countries" DataSource="@country" @bind-Value="@CountryValue">
                    <MultiSelectFieldSettings Text="Name" Value="Code"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
        <div id="remote-data" class="col-lg-6">
            <div class="content">
                <h4>Remote Data</h4>
                <SfMultiSelect TValue="int?[]" TItem="EmployeeData" Placeholder="Select a name" Query="@RemoteQuery" @bind-Value="@EmployeeValue">
                    <SfDataManager Url="https://ej2services.syncfusion.com/production/web-services/api/Employees" Adaptor="@Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain=true></SfDataManager>
                    <MultiSelectFieldSettings Text="FirstName" Value="EmployeeID"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="local-data" class="col-lg-6">
            <div class="content">
                <h4>Observable Collection</h4>
                <SfMultiSelect TValue="string[]" TItem="Colors" PopupHeight="230px" Placeholder="Select a color" DataSource="@ColorsData" @bind-Value="@ColorValue">
                    <MultiSelectFieldSettings Text="Color" Value="Code"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
        <div id="remote-data" class="col-lg-6">
            <div class="content">
                <h4>ExpandoObject</h4>
                <SfMultiSelect TItem="ExpandoObject" TValue="string[]" PopupHeight="230px" Placeholder="Select a vehicle" DataSource="@VehicleData" @bind-Value="@VehicleValue">
                    <MultiSelectFieldSettings Text="Text" Value="ID"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="local-data" class="col-lg-6">
            <div class="content">
                <h4>DynamicObject</h4>
                <SfMultiSelect TValue="string[]" TItem="DynamicDictionary" Placeholder="Select a name" DataSource="@Orders" @bind-Value="@MultiValue">
                    <MultiSelectFieldSettings Text="CustomerName" Value="CustomerName"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
    </div>
</div>

@code{
    public string[] CountryValue { get; set; } = { "FR", "DE" };
    public int?[] EmployeeValue { get; set; } = { 1, 2 };
    public string[] ColorValue { get; set; } = { "#75523C", "#FE2A00"};
    public string[] VehicleValue { get; set; } = { "1002", "1010"};
    public string[] MultiValue { get; set; } = { "Michael", "Robert"};
    public class Countries
    {
        public string Name { get; set; }
        public string Code { get; set; }
    }

    private List<Countries> country = new List<Countries>
    {
        new Countries() { Name = "Australia", Code = "AU" },
        new Countries() { Name = "Bermuda", Code = "BM" },
        new Countries() { Name = "Canada", Code = "CA" },
        new Countries() { Name = "Cameroon", Code = "CM" },
        new Countries() { Name = "Denmark", Code = "DK" },
        new Countries() { Name = "France", Code = "FR" },
        new Countries() { Name = "Finland", Code = "FI" },
        new Countries() { Name = "Germany", Code = "DE" },
        new Countries() { Name = "Greenland", Code = "GL" },
        new Countries() { Name = "Hong Kong", Code = "HK" },
        new Countries() { Name = "India", Code = "IN" },
        new Countries() { Name = "Italy", Code = "IT" },
        new Countries() { Name = "Japan", Code = "JP" },
        new Countries() { Name = "Mexico", Code = "MX" },
        new Countries() { Name = "Norway", Code = "NO" },
        new Countries() { Name = "Poland", Code = "PL" },
        new Countries() { Name = "Switzerland", Code = "CH" },
        new Countries() { Name = "United Kingdom", Code = "GB" },
        new Countries() { Name = "United States", Code = "US" },
    };

    public Query RemoteQuery = new Query();
    public class EmployeeData
    {
        public int EmployeeID { get; set; }
        public string FirstName { get; set; }
        public string Designation { get; set; }
        public string Country { get; set; }
    }
    public class Colors
    {
        public string Code { get; set; }
        public string Color { get; set; }
    }
    private ObservableCollection<Colors> ColorsData = new ObservableCollection<Colors>() 
    {
        new Colors() { Color = "Chocolate", Code = "#75523C" }, 
        new Colors() { Color = "CadetBlue", Code = "#3B8289" },
        new Colors() { Color = "DarkOrange", Code = "#FF843D" },
        new Colors() { Color = "DarkRed", Code = "#CA3832"},
        new Colors() { Color = "Fuchsia", Code = "#D44FA3" },
        new Colors() { Color = "HotPink", Code = "#F23F82" },
        new Colors() { Color = "Indigo", Code = "#2F5D81" },
        new Colors() { Color = "LimeGreen", Code = "#4CD242" },
        new Colors() { Color = "OrangeRed", Code = "#FE2A00" },
        new Colors() { Color = "Tomato", Code = "#FF745C" },
        new Colors() { Color = "Brown", Code = "#A52A2A" },
        new Colors() { Color = "Maroon", Code = "#800000" },
        new Colors() { Color = "Green", Code = "#008000" },
        new Colors() { Color = "Pink", Code = "#FFC0CB" },
        new Colors() { Color = "Purple", Code = "#800080" }
    };
    public List<ExpandoObject> VehicleData { get; set; } = new List<ExpandoObject>();
    public List<DynamicDictionary> Orders = new List<DynamicDictionary>() { };
    protected override void OnInitialized()
    {
        VehicleData = Enumerable.Range(1, 15).Select((x) =>
        {
            dynamic d = new ExpandoObject();
            d.ID = (1000 + x).ToString();
            d.Text = (new string[] { "Hennessey Venom", "Bugatti Chiron", "Bugatti Veyron Super Sport", "SSC Ultimate Aero", "Koenigsegg CCR", "McLaren F1", "Aston Martin One- 77", "Jaguar XJ220", "McLaren P1", "Ferrari LaFerrari", "Mahindra Jaguar", "Hyundai Toyota", "Jeep Volkswagen", "Tata Maruti Suzuki", "Audi Mercedes Benz"}[x-1]);
            return d;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();

        Orders = Enumerable.Range(1, 15).Select((x) =>
        {
            dynamic d = new DynamicDictionary();
            d.OrderID = 1000 + x;
            d.CustomerName = (new string[] { "Nancy", "Andrew", "Janet", "Margaret", "Steven", "Michael", "Robert", "Anne", "Nige", "Fuller", "Dodsworth", "Leverling", "Callahan", "Suyama", "Davolio" }[x-1]);
            return d;
        }).Cast<DynamicDictionary>().ToList<DynamicDictionary>();
    }
    public class DynamicDictionary : System.Dynamic.DynamicObject
    {
        Dictionary<string, object> dictionary = new Dictionary<string, object>();
        public override bool TryGetMember(GetMemberBinder binder, out object result)
        {
            string name = binder.Name;
            return dictionary.TryGetValue(name, out result);
        }
        public override bool TrySetMember(SetMemberBinder binder, object value)
        {
            dictionary[binder.Name] = value;
            return true;
        }
        //The GetDynamicMemberNames method of DynamicObject class must be overridden and return the property names to perform data operation and editing while using DynamicObject.
        public override System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames()
        {
            return this.dictionary?.Keys;
        }
    }
}

<style>
    .content {
        margin: 30px;
    }
</style>

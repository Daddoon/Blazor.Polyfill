@page "/TimePicker/Time-Format"

@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using System.Collections
@using System

@inherits SampleBaseComponent;

<SampleDescription>
   <p>The TimePicker has been customized with 24-hour <code>format</code> with 60 minutes <code>interval</code>. Click the TimePicker icon to a select a time from 00:00 to 23:00 from the TimePicker popup.</p>
</SampleDescription>
<ActionDescription>
    <p>TimePicker provides an option to customize the display format of the time value using the
      <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Calendars.SfTimePicker-1.html#Syncfusion_Blazor_Calendars_SfTimePicker_1_Format' target='_blank'>Format</a> property. It accepts <a href='https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings' target='_blank'>standard</a> &<a href='https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings' target='_blank'> custom date and time format strings</a> as specified in MSDN.
    </p>
    <p>Here, the time value displayed in 24-hour format with <code> 60 </code> minute step interval. To know more about custom time formatting, refer the <a href='https://ej2.syncfusion.com/aspnetcore/documentation/base/intl.html#custom-formats' target='_blank'> Parsing and formatting</a> section. By default, TimePicker component is formatted with `en` (English) culture.
    More information about the TimePicker and it's configuration can be found in the <a href='https://blazor.syncfusion.com/documentation/timepicker/getting-started/' target='_blank'> documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="col-lg-8">
        <div id="wrapper">
            <SfTimePicker TValue="DateTime?" Placeholder="Select a time" Value="@TimeValue" Step=60 Format="@FormatString" ShowClearButton="true"></SfTimePicker>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="content property-section">
            <div class="property">Properties</div>
            <table>
                <tbody>
                    <tr>
                        <td>
                            <div class="property-label ">Format</div>
                        </td>
                        <td>
                            <div>
                                 <SfDropDownList TItem="TimeFormat" TValue="string" PopupHeight="230px" @bind-Index="@Index" DataSource="@Formats">
                                    <DropDownListEvents TValue="string" TItem="TimeFormat" ValueChange="OnChange"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private int? Index { get; set; } = 0;
    public DateTime? TimeValue { get; set; } = DateTime.Now;
    public class TimeFormat
    {
        public string ID { get; set; }

        public string Text { get; set; }
    }
    public string FormatString { get; set; } = "HH:mm";
    private List<TimeFormat> Formats = new List<TimeFormat>() {
        new TimeFormat(){ ID= "format1", Text= "HH:mm" },
        new TimeFormat(){ ID= "format2", Text= "hh:mm" },
        new TimeFormat(){ ID= "format3", Text= "hh:mm tt" },
     };
    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TimeFormat> args)
    {
        this.FormatString = args.ItemData?.Text;
    }
}

<style>
    #wrapper {
        max-width: 300px;
        margin: 0px auto;
        padding-top: 50px;
    }

    .property {
        padding: 5px 0 0 10px;
        padding-bottom: 20px;
        font-weight: 600;
        font-size: 15px;
    }

    .property-label  {
        margin: 10px;
        width: 100px;
        font-size: 13px;
    }
</style>
@namespace BlazorDemos.Shared

@if (!isModalType)
{
    <div class="@classNames" @onclick="onOverlayClick">
        <div id="loader" class="@loadingClass">
            <svg class="circular" height="40" width="40">
                <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10"></circle>
            </svg>
        </div>
    </div>
}
else
{
    <div class="@classNames" @onclick="onOverlayClick"></div>
}

@code {
    private string classNames = "sb-body-overlay";
    private string loadingClass = "sb-loading";
    private bool isModalType { get; set; }
    [CascadingParameter]
    protected MainLayout Layout { get; set; }

    /// <summary>
    /// Hides the Spinner component.
    /// </summary>
    public void Hide()
    {
        if (classNames.Contains("sb-body-overlay"))
        {
            classNames = SampleUtils.AddClass(classNames, SampleUtils.HIDDEN);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Shows the Spinner component.
    /// </summary>
    public void Show()
    {
        classNames = SampleUtils.RemoveClass(classNames, SampleUtils.HIDDEN);
        StateHasChanged();
    }

    public void NotifyOpened()
    {
        classNames = SampleUtils.AddClass(classNames, "sb-notification-overlay");
        classNames = SampleUtils.RemoveClass(classNames, SampleUtils.HIDDEN);
        classNames = SampleUtils.RemoveClass(classNames, "sb-body-overlay");
        loadingClass = SampleUtils.AddClass(loadingClass, SampleUtils.HIDDEN);
        StateHasChanged();
    }
    public void NotifyClosed()
    {
        classNames = SampleUtils.RemoveClass(classNames, "sb-notification-overlay");
        classNames = SampleUtils.AddClass(classNames, SampleUtils.HIDDEN);
        classNames = SampleUtils.AddClass(classNames, "sb-body-overlay");
        loadingClass = SampleUtils.RemoveClass(loadingClass, SampleUtils.HIDDEN);
        StateHasChanged();
    }

    private void onOverlayClick()
    {
        if (Layout.headerRef.isNotifyClicked)
        {
            Layout.headerRef.OnPopupHide();
        }
    }

    /// <summary>
    /// Sets model layout to the app background to prevent mouse interaction.
    /// </summary>
    /// <param name="isModelSpinner">Disable or enable model layout based on the input.</param>
    public void ShowModalSpinner(bool isModelSpinner = true)
    {
        isModalType = isModelSpinner;
        if (isModelSpinner)
        {
            classNames = SampleUtils.AddClass(classNames, SampleUtils.MODAL_CLASS);
            classNames = SampleUtils.RemoveClass(classNames, SampleUtils.HIDDEN);
        }
        else
        {
            classNames = SampleUtils.RemoveClass(classNames, SampleUtils.MODAL_CLASS);
            if (classNames.Contains("sb-body-overlay"))
            {
                classNames = SampleUtils.AddClass(classNames, SampleUtils.HIDDEN);
            }
        }
        StateHasChanged();
    }
}


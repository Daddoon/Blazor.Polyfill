@using Syncfusion.Blazor.Buttons;

@namespace BlazorDemos.Shared

@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject SampleService SampleService;

<div id='sample-header' class="sb-header e-view" role="banner">
    <div class='sb-header-left sb-left sb-table'>
        <div class='sb-header-item sb-table-cell'>
            <div id="sb-toggle-left" @onclick="OnToggleClick" @onclick:stopPropagation="true" role="button" tabindex="0" class="sb-slide-nav sb-icons toggle-active sb-icon-hamburger" aria-label="toggle all controls navigation"
                 title='toggle leftpane'></div>
        </div>
        <div class='sb-header-item sb-table-cell' id="sb-header-text" @onclick="HomeIconClick" style="padding-left:20px">
            <span>Essential Studio for Blazor </span>
        </div>
    </div>
     @if (!SampleService.IsDevice)
     {
        <div class='sb-header-item sb-table-cell' id="sb-index-search-container" style="padding-right:20px">
           <SearchComponent @ref="@searchRef"></SearchComponent>
        </div>
      }
    <div class='sb-header-right sb-right sb-table'>
        <div class="sb-header-item sb-table-cell">
            <div id="header-theme-switcher" role="button" tabindex="0" title='Change theme of sample browser'>
                <DropDownComponent  @ref="dropdownRef" DataSource="@SampleUtils.ThemeData" DefaultValue="CHOOSE THEME" OnSelect="OnThemeChange">
                    <ItemTemplate>
                        @if (currentTheme == context.ID)
                        {
                            <span class="sb-icons sf-theme-selection-icon"></span>
                        }
                        <span>@context.Text</span>
                    </ItemTemplate>
                </DropDownComponent>
            </div>
        </div>
	   @if (SampleService.IsDevice){
           <div class='sb-header-item sb-table-cell sb-search-container'>
              <div class="@searchClass" role="button" tabindex="0" aria-label="toggle sample search" title="Toggle sample search" @onclick="@OnSearchRender">
                  <span class="sb-settings sb-icons sb-icon-search"></span>
              </div>
           </div>
        }

        <div class='sb-header-item sb-table-cell sb-settings-container'>
            <div class='@preferenceClass' role="button" tabindex="0" aria-label="toggle settings menu" title="Toggle sample browser preferences" @onclick="@OnPreferenceClick">
                <span class='sb-settings sb-icons sb-icon-settings-preferences'></span>
            </div>
            <Preferences @ref="@preferenceRef"></Preferences>
        </div>
       
        <div class='sb-header-item sb-table-cell sb-notification-container'>
            <div class="sf-notification"  role="button" tabindex="0" aria-label="notification settings menu" @onclick="NotifyClicked" style="position:relative;display:inline-block">
                <span class='sb-notification sb-icons sf-sb-icon-notifications'></span>
            </div>
        </div>
        
        <div class='sb-header-item sb-table-cell sb-download-container'>
            <a href='https://github.com/syncfusion/blazor-samples' target="_blank" rel="noopener">
                <button id='github' class='sb-github-btn'>
                    <div class="sb-icons github-logo" title="Explore in Github"></div>
                </button>
            </a>
        </div>
        <div class="sb-header-splitter sb-download-splitter"></div>
        <div class='sb-header-item sb-table-cell sb-download-container'>
            <a href='https://www.syncfusion.com/downloads/blazor/' target="_blank" rel="noopener">
                <button id='download-now' class='sb-download-btn'>
                    <span class='sb-download-text'>FREE TRIAL</span>
                </button>
            </a>
        </div>
        <div class="sb-header-item sb-table-cell sb-header-settings sb-icons" @onclick="@OnRightToggleClick" @onclick:stopPropagation="true" role="button"></div>
    </div>
</div>

@if (isNotifyClicked)
{
<div class="@notificationClass">
    <div class='sb-notification-item'>
        <span class="sb-notification-update">New Updates</span>
        <span class="sb-notification-new">
            <a href="https://www.syncfusion.com/products/whatsnew/blazor-components" target="_blank">Whats New</a>
        </span>
        <span class="sb-icons sf-clear-icon" @onclick="OnPopupHide" aria-label="close" role="button"></span>
    </div>
    <hr />
    <div>
        @foreach (var ComponentList in notificationlist)
        {
             var listclass = "sb-notification-list";
             <div class="sb-notification-content-container">
                 <div class=" sb-notification-content">
                     <div class="sb-notification-category">
                          <a href='@UriHelper.BaseUri' onclick="window.open(this.href + '@ComponentList.DefaultSamplePath')" target="_blank"> @ComponentList.Name</a>
                     </div>
                      @foreach (var SampleList in ComponentList.SampleList)
                      {
                        <div class="sb-notification-list-container">
                           <div class="sb-notification-sample">
                               @SampleList.SampleName -
                               <span class="sb-Notification-link-label">
                                    <a href='@UriHelper.BaseUri' onclick="window.open(this.href + '@SampleList.SampleUrl')" target="_blank">View Demo</a>
                               </span>
                            </div>
                            @if (SampleList.NotificationContent.Length == 1){
                               listclass = listclass + SampleUtils.SPACE + "list-type-none";
                            }
                           <ul class="@listclass">
                               @foreach (var content in SampleList.NotificationContent)
                               {
                                   <li>@content</li>
                               }
                            </ul>
                         </div>
                          count++;
                        }
                 </div>
              </div>
        }
        @if (count == 0)
        {
           <span class="sb-notifiction-Update">No new updates available.</span>
        }
    </div>
</div>
}

@code {
    private string searchClass { get; set; }
    private string currentTheme { get; set; }
    private string preferenceClass { get; set; }
    private string notificationClass { get; set; }
    private bool isPreferenceClicked { get; set; }
    private List<NotificationList> notificationlist { get; set; }
    public bool isNotifyClicked { get; set; }
    public int count { get; set; } = 0;
    private string DemoLink { get; set; }
    private Preferences preferenceRef { get; set; }
    private SearchComponent searchRef { get; set; }
    public DropDownComponent dropdownRef { get; set; }

    /// <summary>
    /// Triggers event callback on left toggle button action.
    /// </summary>
    [Parameter]
    public EventCallback OnToggleClick { get; set; }

    [CascadingParameter]
    protected MainLayout Layout { get; set; }

    /// <summary>
    /// Triggers event callback on right toggle button action in device rendering.
    /// </summary>
    [Parameter]
    public EventCallback OnRightToggleClick { get; set; }

    // Theme switcher change handler
    private void OnThemeChange(DropDownData args)
    {
        var currentTheme = SampleUtils.GetThemeName(UriHelper.Uri);
        if (currentTheme != args.ID)
        {
            var url = SampleUtils.GetThemeUrl(UriHelper.Uri.TrimEnd('/'), args.ID);
            UriHelper.NavigateTo(url, true);
        }
    }

    private void NotifyClicked() {
        notificationClass = SampleUtils.RemoveClass(notificationClass, SampleUtils.DISPLAY_NONE);
        notificationClass = SampleUtils.AddClass(notificationClass, SampleUtils.ACTIVE_CLASS);
        isNotifyClicked = true;
        Layout.spinnerRef.NotifyOpened();
    }

    public void OnPopupHide() {
        notificationClass = SampleUtils.AddClass(notificationClass, SampleUtils.DISPLAY_NONE);
        notificationClass = SampleUtils.RemoveClass(notificationClass, SampleUtils.ACTIVE_CLASS);
        isNotifyClicked = false;
        StateHasChanged();
        Layout.spinnerRef.NotifyClosed();
    }

    // Search icon click handler.
    private async Task OnSearchRender()
    {
        await Layout.ShowSearchLayout(true);
    }

    private async Task HomeIconClick(){
       await Layout.LeftPaneRef.HomeButtonClick();
    }

    // Preferences icon click handler.
    private void OnPreferenceClick()
    {
        isPreferenceClicked = true;
        var isActive = preferenceClass.Contains(SampleUtils.ACTIVE_CLASS);
        if (isActive)
        {
            preferenceClass = SampleUtils.RemoveClass(preferenceClass, SampleUtils.ACTIVE_CLASS);
        }
        else
        {
            preferenceClass = SampleUtils.AddClass(preferenceClass, SampleUtils.ACTIVE_CLASS);
        }
        preferenceRef.ShowPopup(!isActive);
    }

    /// <summary>
    /// Hides the preferences popup element.
    /// </summary>
    public void HidePreferences()
    {
        if (!isPreferenceClicked && !preferenceRef.IsPopupClicked())
        {
            preferenceClass = SampleUtils.RemoveClass(preferenceClass, SampleUtils.ACTIVE_CLASS);
            preferenceRef.ShowPopup(false);
            StateHasChanged();
        }
        isPreferenceClicked = false;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        currentTheme = SampleUtils.GetThemeName(UriHelper.Uri);
        searchClass = SampleUtils.HEADER_SEARCH_CLASS;
        preferenceClass = SampleUtils.HEADER_PREFERENCES_CLASS;
        notificationlist = new NotificationList().GetNotificationData();
        notificationClass = SampleUtils.NOTIFICATION_POPUP_CLASS + SampleUtils.SPACE + SampleUtils.DISPLAY_NONE;
    }
}

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazor.Polyfill.Server</name>
    </assembly>
    <members>
        <member name="M:Blazor.Polyfill.Server.BlazorPolyfillMiddlewareExtensions.AddBlazorPolyfill(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Add the required services for BlazorPolyfill.
            If the preventReactServicesRegistration parameter is set to true,
            the React.NET library used for transpilation with Babel will not
            be registered automatically. You will have to write yourself the
            AddReact and AddJsEngineSwitcher logic in your Startup ConfigureServices method.
            You will also have to call by yourself UseReact in Startup Configure method
            before UseBlazorPolyfill.
            
            You can use this to have control over the transpilation process.
            
            Also, if you are on an unsupported platform or CPU for transpilation, like
            ARM32v7, you should set this option to true, and enable UsePackagedBlazorServerLibrary
            in BlazorPolyfillOptions in the UseBlazorPolyfill method call in Startup Configure method.
            </summary>
            <param name="services"></param>
            <param name="preventReactServicesRegistration"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.BlazorPolyfillMiddlewareExtensions.AddBlazorPolyfill(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the required services for BlazorPolyfill
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.BlazorPolyfillMiddlewareExtensions.Transform(System.String,System.String,System.String)">
            <summary>
            Transform the current JS input to an ES5 compliant JS code thanks to Babel through ReactNET.
            TODO: Move this method in an helper
            </summary>
            <param name="input"></param>
            <param name="filename"></param>
            <param name="babelrcJSON"></param>
            <returns></returns>
            <exception cref="T:React.Exceptions.BabelException"></exception>
        </member>
        <member name="F:Blazor.Polyfill.Server.BlazorPolyfillMiddlewareExtensions._fakeie11Polyfill">
            <summary>
            Used to return an empty file but hashed with some dummy valid values in order to generate a usable Hash/ETag for browser caching
            </summary>
        </member>
        <member name="M:Blazor.Polyfill.Server.BlazorPolyfillOptions.GetJavascriptToInject">
            <summary>
            The returned value will be injected before the polyfill content
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.ForceES5Fallback">
            <summary>
            If the <see cref="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.ForceES5Fallback"/> parameter is set to <see cref="!:true"/>,
            the blazor.polyfill.js library content will always be returned
            and the blazor.server.js library will always be transpiled to ES5 with the needed fixes.
            
            If this parameter is set to <see cref="!:false"/>, only Internet Explorer 11 and Edge Legacy will have
            the ES5 fallback behavior.
            
            Default value is <see cref="!:false"/>.
            </summary>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.ES5FallbackValidation">
            <summary>
            Provide a method that validate if the current request should return the ES5 Fallback behavior or not.
            This can be useful if you want to extend the polyfill to some other browsers and/or conditions specific values.
            
            Note that if <see cref="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.ForceES5Fallback"/> option is set to true, the <see cref="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.ES5FallbackValidation"/> return value
            will have no effect.
            
            Also, Internet Explorer 11 and Edge Legacy will always return the ES5 Fallback behavior in all scenarios.
            </summary>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.JavascriptModuleImportEmulation">
            <summary>
            If enabled, the polyfill library will assume that you have added the BlazorPolyfill.Build library to your project
            and will try to load the generated ES5 scripts version of your javascript modules at boot after the polyfill library
            initialization on client side.
            
            You can customize the expected library path and name to load through <see cref="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.JavascriptModuleImportEmulationLibraryPath"/> property
            </summary>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.JavascriptModuleImportEmulationLibraryPath">
            <summary>
            Get or set the value of the path location of your ES5 javascript library file that emulate your regular javascript modules,
            generated from the BlazorPolyfill.Build package. The path given will be used to load your modules after the polyfill
            initialization. Default value is: "/es5module.min.js"
            </summary>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.UsePackagedBlazorServerLibrary">
            <summary>
            If set to true, the returned blazor.server.js file for ES5 compatibility will be a packaged one in this library
            instead of the one generated dynamically. It's not recommended in the sense that this usage prevent the automatic update
            of the blazor.server.js library if you install newer version of Blazor Server, and would maybe add issue. This option
            is a convenience for users who cannot dynamically transpile with React.NET/Babel because of missing JS engines for their
            platform or having issue with it, typically like ARM32v7 OS's.
            </summary>
        </member>
        <member name="P:Blazor.Polyfill.Server.BlazorPolyfillOptions.CustomES5PathList">
            <summary>
            A list of JS absolute path for your app that need to be transpiled to ES5 when fetched.
            This usage can workaround some third party JS libraries that are not directly compliant to ES6 that would return
            from a server request.
            </summary>
        </member>
        <member name="M:Blazor.Polyfill.Server.Helper.CryptographyHelper.CreateMD5(System.String)">
            <summary>
            Get MD5 from string content
            Source: https://stackoverflow.com/a/24031467
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.HttpRequestExtensions.IsInternetExplorer(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            If Internet Explorer is detected, return true
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.HttpRequestExtensions.IsInternetExplorer(System.String)">
            <summary>
            If Internet Explorer is detected, return true
            </summary>
            <param name="userAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.HttpRequestExtensions.IsEdgeHTML(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            This is about Edge Legacy / EdgeHTML, not the new Chromium one
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.HttpRequestExtensions.IsEdgeHTML(System.String)">
            <summary>
            This is about Edge Legacy / EdgeHTML, not the new Chromium one
            </summary>
            <param name="userAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Blazor.Polyfill.Server.HttpRequestExtensions.BrowserNeedES5Fallback(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            If the current user-agent in the request is eligible for ES5 fallback, return true
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Blazor.Polyfill.Server.Middleware.ECMAScript5Middleware">
            <summary>
            Inspiration from:
            This: https://github.com/saturn72/tethys/blob/851ac6d6235c5e2d2f62c3d4343b8e862062a3c2/src/Tethys.Server/Middlewares/RequestResponseLoggingMiddleware.cs
            Linking this: https://www.carlrippon.com/adding-useful-information-to-asp-net-core-web-api-serilog-logs/
            </summary>
        </member>
        <member name="M:Blazor.Polyfill.Server.Middleware.ECMAScript5Middleware.CopyStreamAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Like copy stream but with automatic Seek Handling.
            Assuming the Source can be read
            Return the Destination Stream
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Blazor.Polyfill.Server.Model.FileContentReference">
            <summary>
            This class is intentionally a kind of placeholder in order to avoid "value" copy of the file stored
            with the string class. We want a kind of "ref" behavior, with the value copied/written only 
            </summary>
        </member>
    </members>
</doc>
